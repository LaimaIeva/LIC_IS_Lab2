clc
clear
% Mokymo duomenų rinkinys
x = 0:1/19:1;
y = ((1+0.6*sin(2*pi*x/0.7))+0.3*sin(2*pi*x))/2;
% figure(1)
% plot(x, y, 'r+');
% title('Grafikas');
% hold on
% grid on;

% Pasirinktas neuronų skaičius: 5
% Pradinės ryšių svorių reikšmės
% Paslėptasis sluoksnis
w11_1 = randn(1); b1_1 = randn(1);
w21_1 = randn(1); b2_1 = randn(1);
w31_1 = randn(1); b3_1 = randn(1);
w41_1 = randn(1); b4_1 = randn(1);
w51_1 = randn(1); b5_1 = randn(1);

% išėjimo sluoksnis
w11_2 = randn(1); b1_2 = randn(1);
w12_2 = randn(1);
w13_2 = randn(1);
w14_2 = randn(1);
w15_2 = randn(1);

mok_z = 0.15;
% Momentinio tinklo atsako apskaičiavimas
for index=1:100000
    for n=1:20 %length(x)
        % Pasvertos sumos skaičiavimai pasleptajame sluoksnyje
        v1_1 = x(n)*w11_1+b1_1;
        v2_1 = x(n)*w21_1+b2_1;
        v3_1 = x(n)*w31_1+b3_1;
        v4_1 = x(n)*w41_1+b4_1;
        v5_1 = x(n)*w51_1+b5_1;
        
        % Aktyvavimo funkcija pasleptajame sluoksnyje
        y1_1 = 1./(1+exp(-v1_1));
        y2_1 = 1./(1+exp(-v2_1));
        y3_1 = 1./(1+exp(-v3_1));
        y4_1 = 1./(1+exp(-v4_1));
        y5_1 = 1./(1+exp(-v5_1));
        
        % Pasverta suma išėjimo sluoksnyje
        v = y1_1.*w11_2 + y2_1.*w12_2 + y3_1.*w13_2 + y4_1.*w14_2 + y5_1.*w15_2 + b1_2;
        
        % Tinklo atsakas pritaikius aktyvavimo funkcijas
        y_apsk = v;
    
        % Palyginti su norimu atsaku ir apskaičiuoti klaidą
        e = y - y_apsk;
        
        % Atlikti tinklo mokymą
        delta_out = e;
    
        delta1_1 = y1_1.*(1-y1_1).*(delta_out.*w11_2);
        delta2_1 = y2_1.*(1-y2_1).*(delta_out.*w12_2);
        delta3_1 = y3_1.*(1-y3_1).*(delta_out.*w13_2);
        delta4_1 = y4_1.*(1-y4_1).*(delta_out.*w14_2);
        delta5_1 = y5_1.*(1-y5_1).*(delta_out.*w15_2);
    
        % Atnaujinti svorius paslėptajame sluoksnyje
        w11_1 = w11_1 + mok_z*delta1_1*x(n);
        w21_1 = w21_1 + mok_z*delta2_1*x(n);
        w31_1 = w31_1 + mok_z*delta3_1*x(n);
        w41_1 = w41_1 + mok_z*delta4_1*x(n);
        w51_1 = w51_1 + mok_z*delta5_1*x(n);
        b1_1 = b1_1 + mok_z*delta1_1;
        b2_1 = b2_1 + mok_z*delta2_1;
        b3_1 = b3_1 + mok_z*delta3_1;
        b4_1 = b4_1 + mok_z*delta4_1;
        b5_1 = b5_1 + mok_z*delta5_1;
    
        % Atnaujinti svorius išėjimo sluoksnyje
        w11_2 = w11_2 + mok_z*delta_out.*y1_1;
        w12_2 = w12_2 + mok_z*delta_out.*y1_1;
        w13_2 = w13_2 + mok_z*delta_out.*y1_1;
        w14_2 = w14_2 + mok_z*delta_out.*y1_1;
        w15_2 = w15_2 + mok_z*delta_out.*y1_1;
        b1_2 = b1_2 + mok_z*delta_out;
    end
end

for m=1:x
        % Pasvertos sumos skaičiavimai 1 sluoksnyje
        v1_1 = x(m)*w11_1+b1_1;
        v2_1 = x(m)*w21_1+b2_1;
        v3_1 = x(m)*w31_1+b3_1;
        v4_1 = x(m)*w41_1+b4_1;
        v5_1 = x(m)*w51_1+b5_1;
        
        % Aktyvavimo funkcija 1 sluoksnyje
        y1_1 = 1./(1+exp(-v1_1));
        y2_1 = 1./(1+exp(-v2_1));
        y3_1 = 1./(1+exp(-v3_1));
        y4_1 = 1./(1+exp(-v4_1));
        y5_1 = 1./(1+exp(-v5_1));
        
        % Pasverta suma išėjimo sluoksnyje
        v = y1_1.*w11_2 + y2_1.*w12_2 + y3_1.*w13_2 + y4_1.*w14_2 + y5_1.*w15_2 + b1_2;
        
        % Tinklo atsakas pritaikius aktyvavimo funkcijas
        y_apsk(m) = v;
end

figure,
plot(x,y,'kx', x,y_apsk,'b*')
